(fact 4)
(define T (lambda (x y ) y))
(define F (lambda (x y ) x))
(define , (lambda (x y f ) ((f x) y)))
(define . (lambda (x ) T))
(define @ (lambda (n f x ) (f ((n f) x))))
(define pred (lambda (n f x ) (((n (lambda (g h ) (h (g f)))) (lambda (u ) x)) (lambda (u ) u))))
(define mul (lambda (m n f ) (m (n f))))
(define is0 (lambda (n ) ((n (lambda (_ ) F)) T)))
(define Y (lambda (f ) ((lambda (x ) (x x)) (lambda (x ) (f (x x))))))
(define fact (Y (lambda (f n ) (((is0 n) 1) ((mul n) (f (pred n)))))))
