; https://justine.lol/lambda/

: if      # 0
: omega   # (0 0)
: pair    ### ((0 2) 1)
: car     # (0 $true)
: cdr     # (0 $false)
: or      ## ((0 0) 1)
: and     ## ((0 1) 0)
: not     ### ((2 0) 1)
: xor     ## ((1 ## ((2 0) 1)) 0)
: bitxor  ## ((1 0) ## ((2 0) 1))
: iszero  ### ((2 # 1) 1)
: Y       # (# (0 0) # (1 (0 0)))

: zero    ## 0
: one     ## (1 0)
: two     ## (1 (1 0))
: three   ## (1 (1 (1 0)))
: four    ## (1 (1 (1 (1 0))))
: five    ## (1 (1 (1 (1 (1 0)))))
: six     ## (1 (1 (1 (1 (1 (1 0))))))
: seven   ## (1 (1 (1 (1 (1 (1 (1 0)))))))
: eight   ## (1 (1 (1 (1 (1 (1 (1 (1 0))))))))
: nine    ## (1 (1 (1 (1 (1 (1 (1 (1 (1 0)))))))))

: pow     ## (0 1)
: mul     ### (2 (1 0))
: dec     ### (((2 ## (0 (1 3))) # 1) # 0)
: sub     ## ((0 $dec) 1)
: inc     ### (1 ((2 1) 0))
: add     #### ((3 1) ((2 1) 0))
: fac     ## (((1 ## (0 (1 ## ((2 1) (1 0))))) #1) #0)
: min     #### (((3 ## (0 1)) #1) ((2 ## (3 (0 1))) #1))
: div     #### (((3 ## (0 1)) # 1) ((3 # (((3 ## (0 1)) # (3 (0 1))) #0)) 0))
: mod     #### (((3 $cdr) ((3 # (((3 ### ((0 (2 (5 1))) 1)) #1) 1)) #1)) ##0)

: eq      ## ((((1 # ((0 #0) #0)) ((0 ### (1 2)) ##0)) ###0) ##1)
: le      ## (((1 ## (0 1)) ###1) ((0 ## (0 1)) ###0))
: lt      ## (((0 ## (0 1)) ###0) ((1 ## (0 1)) ###1))
: odd     # (# (0 0) ## ((0 ## 1) # ((0 ## 0) (2 2))))
: divides ## (((1 $cdr) ($omega #(((1 ### ((0 (2 ##0)) 1)) #(1 1)) ##1))) ##0)
