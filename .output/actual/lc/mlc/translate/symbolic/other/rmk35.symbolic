(define Y (lambda (f ) ((lambda (x ) (f (x x))) (lambda (x ) (f (x x))))))
(define id (lambda (x ) x))
(define compose (lambda (f g x ) (f (g x))))
(define T (lambda (x y ) x))
(define F (lambda (x y ) y))
(define if (lambda (p x y ) ((p x) y)))
(define pair (lambda (x y f ) ((f x) y)))
(define fst (lambda (p ) (p (lambda (x y ) x))))
(define snd (lambda (p ) (p (lambda (x y ) y))))
(define cons (lambda (x y f init ) ((f x) ((y f) init))))
(define nil (lambda (f init ) init))
(define fold (lambda (f l init ) ((l f) init)))
(define map (lambda (f l g init ) ((l ((compose g) f)) init)))
(define succ (lambda (n f x ) (f ((n f) x))))
(define add (lambda (n m f x ) ((n f) ((m f) x))))
(define mul (lambda (n m f x ) ((n (m f)) x)))
(define pow (lambda (n m ) (m n)))
(define pred (lambda (n f x ) (((n (lambda (g h ) (h (g f)))) (lambda (u ) x)) (lambda (u ) u))))
(define eq0 (lambda (n ) ((n (lambda (x ) F)) T)))
