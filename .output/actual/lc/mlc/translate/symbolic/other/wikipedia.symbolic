(define id (lambda (x ) x))
(define T (lambda (x y ) x))
(define F (lambda (x y ) y))
(define and (lambda (p q ) ((p q) p)))
(define or (lambda (p q ) ((p p) q)))
(define not (lambda (p ) ((p F) T)))
(define if (lambda (p a b ) ((p a) b)))
(define pair (lambda (x y f ) ((f x) y)))
(define first (lambda (p ) (p T)))
(define second (lambda (p ) (p F)))
(define nil (lambda (x ) T))
(define null (lambda (p ) (p (lambda (x y ) F))))
(define repeat (lambda (n x ) ((n (pair x)) nil)))
(define succ (lambda (n f x ) (f ((n f) x))))
(define plus (lambda (m n ) ((m succ) n)))
(define mult (lambda (m n ) ((m (plus n)) 0)))
(define pow (lambda (b e ) (e b)))
(define is0 (lambda (n ) ((n (lambda (x ) F)) T)))
(define Φ (lambda (x ) ((pair (second x)) (succ (second x)))))
(define phi Φ)
(define pred (lambda (n ) (first ((n Φ) ((pair 0) 0)))))
(define sub (lambda (m n ) ((n pred) m)))
(define leq (lambda (m n ) (is0 ((sub m) n))))
