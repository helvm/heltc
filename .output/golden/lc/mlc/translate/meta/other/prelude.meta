: id \ x x
: T \ x \ y x
: F \ x \ y y
: and \ p \ q p q p
: or \ p \ q p p q
: not \ p p F T
: nand \ p \ q not (and p q)
: nor \ p \ q not (or p q)
: if \ p \ a \ b p a b
: if \ p \ x \ y p x y
: compose \ f \ g \ x f (g x)
: pair \ x \ y \ f f x y
: , pair
: fst \ p p T
: snd \ p p F
: car fst
: cdr snd
: cons \ x \ y \ f \ init f x (y f init)
: nil F
: null \ p p (\ x \ y F)
: repeat \ n \ x n (pair x) nil
: uncons \ xs \ f \ z xs (\ a \ b \ _ f a b) z
: fold \ f \ l \ init l f init
: map \ f \ l \ g \ init l (compose g f) init
: nilmap \ f \ a if (null a) (f a) nil
: succ \ n \ f \ x f (n f x)
: @ succ
: add \ m \ n m succ n
: mul \ m \ n m (add n) 0
: pow \ b \ e e b
: is0 \ n n (\ x F) T
: eq0 is0
: phi \ x cons (cdr x) (succ (cdr x))
: Φ phi
: pred \ n car (n Φ (cons 0 0))
: sub \ m \ n n pred m
: leq \ m \ n is0 (sub m n)
: geq \ m \ n leq n m
: eq \ m \ n and (leq n m) (geq n m)
: neq \ m \ n nand (leq n m) (geq n m)
: lt \ m \ n and (leq n m) (not (geq n m))
: gt \ m \ n and (not (leq n m)) (geq n m)
: Y \ rec (\ x rec (x x)) (\ x rec (x x))
: fix Y
: B \ x \ y \ z x (y z)
: C \ x \ y \ z x z y
: W \ x \ y x y y
: ω \ x x x
: Δ \ x x x
: Ω ω ω
: reverse Y (\ rec \ ys \ xs uncons xs (\ x \ xs rec (cons x ys) xs) ys) nil
: fact Y (\ rec \ n is0 n 1 (mul n (rec (pred n))))
