(define id (lambda (x ) x))
(define T (lambda (x y ) x))
(define F (lambda (x y ) y))
(define and (lambda (p q ) ((p q) p)))
(define or (lambda (p q ) ((p p) q)))
(define not (lambda (p ) ((p F) T)))
(define nand (lambda (p q ) (not ((and p) q))))
(define nor (lambda (p q ) (not ((or p) q))))
(define if (lambda (p a b ) ((p a) b)))
(define if (lambda (p x y ) ((p x) y)))
(define compose (lambda (f g x ) (f (g x))))
(define pair (lambda (x y f ) ((f x) y)))
(define , pair)
(define fst (lambda (p ) (p T)))
(define snd (lambda (p ) (p F)))
(define car fst)
(define cdr snd)
(define cons (lambda (x y f init ) ((f x) ((y f) init))))
(define nil F)
(define null (lambda (p ) (p (lambda (x y ) F))))
(define repeat (lambda (n x ) ((n (pair x)) nil)))
(define uncons (lambda (xs f z ) ((xs (lambda (a b _ ) ((f a) b))) z)))
(define fold (lambda (f l init ) ((l f) init)))
(define map (lambda (f l g init ) ((l ((compose g) f)) init)))
(define nilmap (lambda (f a ) (((if (null a)) (f a)) nil)))
(define succ (lambda (n f x ) (f ((n f) x))))
(define @ succ)
(define add (lambda (m n ) ((m succ) n)))
(define mul (lambda (m n ) ((m (add n)) 0)))
(define pow (lambda (b e ) (e b)))
(define is0 (lambda (n ) ((n (lambda (x ) F)) T)))
(define eq0 is0)
(define phi (lambda (x ) ((cons (cdr x)) (succ (cdr x)))))
(define Φ phi)
(define pred (lambda (n ) (car ((n Φ) ((cons 0) 0)))))
(define sub (lambda (m n ) ((n pred) m)))
(define leq (lambda (m n ) (is0 ((sub m) n))))
(define geq (lambda (m n ) ((leq n) m)))
(define eq (lambda (m n ) ((and ((leq n) m)) ((geq n) m))))
(define neq (lambda (m n ) ((nand ((leq n) m)) ((geq n) m))))
(define lt (lambda (m n ) ((and ((leq n) m)) (not ((geq n) m)))))
(define gt (lambda (m n ) ((and (not ((leq n) m))) ((geq n) m))))
(define Y (lambda (rec ) ((lambda (x ) (rec (x x))) (lambda (x ) (rec (x x))))))
(define fix Y)
(define B (lambda (x y z ) (x (y z))))
(define C (lambda (x y z ) ((x z) y)))
(define W (lambda (x y ) ((x y) y)))
(define ω (lambda (x ) (x x)))
(define Δ (lambda (x ) (x x)))
(define Ω (ω ω))
(define reverse ((Y (lambda (rec ys xs ) (((uncons xs) (lambda (x xs ) ((rec ((cons x) ys)) xs))) ys))) nil))
(define fact (Y (lambda (rec n ) (((is0 n) 1) ((mul n) (rec (pred n)))))))
